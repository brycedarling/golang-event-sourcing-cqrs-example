// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package config

import (
	"github.com/brycedarling/go-practical-microservices/internal/infrastructure/identity"
	"github.com/brycedarling/go-practical-microservices/internal/infrastructure/messagedb"
	"github.com/brycedarling/go-practical-microservices/internal/infrastructure/viewing"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from inject_config.go:

// InitializeConfig ...
func InitializeConfig(env *Env) (*Config, func(), error) {
	db, cleanup, err := NewDB(env)
	if err != nil {
		return nil, nil, err
	}
	store := messagedb.NewMessageDB(db)
	pool, cleanup2 := NewRedisPool(env)
	query := identity.NewQueryRedis(pool)
	viewingQuery := viewing.NewQueryRedis(pool)
	passwordHasher := identity.NewPasswordHasherBcrypt()
	config := NewConfig(env, db, store, pool, query, viewingQuery, passwordHasher)
	return config, func() {
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from inject_env.go:

// InitializeEnv ...
func InitializeEnv() (*Env, error) {
	env, err := NewEnv()
	if err != nil {
		return nil, err
	}
	return env, nil
}
