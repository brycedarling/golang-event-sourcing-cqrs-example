// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package practicalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PracticalServiceClient is the client API for PracticalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PracticalServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Viewing(ctx context.Context, in *ViewingRequest, opts ...grpc.CallOption) (*ViewingResponse, error)
	RecordViewing(ctx context.Context, in *RecordViewingRequest, opts ...grpc.CallOption) (*RecordViewingResponse, error)
}

type practicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPracticalServiceClient(cc grpc.ClientConnInterface) PracticalServiceClient {
	return &practicalServiceClient{cc}
}

func (c *practicalServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/practical.PracticalService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practicalServiceClient) Viewing(ctx context.Context, in *ViewingRequest, opts ...grpc.CallOption) (*ViewingResponse, error) {
	out := new(ViewingResponse)
	err := c.cc.Invoke(ctx, "/practical.PracticalService/Viewing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practicalServiceClient) RecordViewing(ctx context.Context, in *RecordViewingRequest, opts ...grpc.CallOption) (*RecordViewingResponse, error) {
	out := new(RecordViewingResponse)
	err := c.cc.Invoke(ctx, "/practical.PracticalService/RecordViewing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PracticalServiceServer is the server API for PracticalService service.
// All implementations must embed UnimplementedPracticalServiceServer
// for forward compatibility
type PracticalServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Viewing(context.Context, *ViewingRequest) (*ViewingResponse, error)
	RecordViewing(context.Context, *RecordViewingRequest) (*RecordViewingResponse, error)
	mustEmbedUnimplementedPracticalServiceServer()
}

// UnimplementedPracticalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPracticalServiceServer struct {
}

func (UnimplementedPracticalServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPracticalServiceServer) Viewing(context.Context, *ViewingRequest) (*ViewingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Viewing not implemented")
}
func (UnimplementedPracticalServiceServer) RecordViewing(context.Context, *RecordViewingRequest) (*RecordViewingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordViewing not implemented")
}
func (UnimplementedPracticalServiceServer) mustEmbedUnimplementedPracticalServiceServer() {}

// UnsafePracticalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PracticalServiceServer will
// result in compilation errors.
type UnsafePracticalServiceServer interface {
	mustEmbedUnimplementedPracticalServiceServer()
}

func RegisterPracticalServiceServer(s *grpc.Server, srv PracticalServiceServer) {
	s.RegisterService(&_PracticalService_serviceDesc, srv)
}

func _PracticalService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticalServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/practical.PracticalService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticalServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PracticalService_Viewing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticalServiceServer).Viewing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/practical.PracticalService/Viewing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticalServiceServer).Viewing(ctx, req.(*ViewingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PracticalService_RecordViewing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordViewingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticalServiceServer).RecordViewing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/practical.PracticalService/RecordViewing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticalServiceServer).RecordViewing(ctx, req.(*RecordViewingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PracticalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "practical.PracticalService",
	HandlerType: (*PracticalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PracticalService_Login_Handler,
		},
		{
			MethodName: "Viewing",
			Handler:    _PracticalService_Viewing_Handler,
		},
		{
			MethodName: "RecordViewing",
			Handler:    _PracticalService_RecordViewing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "practical.proto",
}
